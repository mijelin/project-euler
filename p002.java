import java.util.HashMap;

/** EVEN FIBONACCI NUMBERS
 *  Each new term in the Fibonacci sequence is generated by adding the previous
 *  two terms. By starting with 1 and 2, the first 10 terms will be:
 *                      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *  By considering the terms in the Fibonacci sequence whose values do not exceed
 *  four million, find the sum of the even-valued terms.
 *  @author Michelle Lin
 */

// Memoized to avoid overhead on Fibonacci calculations
public class p002 {

    /*=== VARIABLES ===*/
    private static final int UPPER_BOUND = 4000000;

    /** Maps the i-th number in the Fibonacci sequence to its value. */
    private static HashMap<Integer, Integer> fib;

    /** Sum for terms.*/
    private static int sum = 0;

    /*=== METHODS ===*/
    /** Computes the sum of even-valued Fibonacci terms. */
    public static void main(String[] ignored) {
        initFib();
        computeEvenFib(UPPER_BOUND, 2);
        System.out.printf("Even-valued Fibonacci terms sum to: %d \n", sum);
    }

    /** Initializes the HashMap and adds the first two numbers to begin calculating
     *  Fibonacci values. Term #0 defined as 1. */
    private static void initFib() {
        fib = new HashMap<Integer, Integer>();
        fib.put(0, 1); fib.put(1, 1);
    }

    /** Recursively computes and stores the I-th Fibonaci number, summing the
     *  even-valued terms. Returns the sum when the value reaches or exceeds
     *  UPPERBOUND. */
    private static int computeEvenFib(int upperBound, int i) {
        int value = fib.get(i - 1) + fib.get(i - 2);
        if (value >= upperBound) {
            return sum;
        } else {
            fib.put(i, value);
            if (isEven(value)) { sum += value; }
            return computeEvenFib(upperBound, i + 1);
        }
    }

    /** Returns true iff N is even. */
    private static boolean isEven(int n) {
        return n % 2 == 0;
    }
}
